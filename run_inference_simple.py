import os
import cv2
import math
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import warnings
from functools import partial
from natsort import natsorted

#from flash_attention_class import FlashAttention


IMG_EXT = (".png", ".jpg", ".jpeg", ".JPG", ".JPEG")


def prepare_image(img, mean, std, inplace=True):
    if not (len(img.shape) == 3):
        raise TypeError(f'Input must be a 3D image tensor (C, H, W), but got shape: {img.shape}')

    if not inplace:
        img = np.copy(img)

    # We need RGB, (C, H, W), value range [0, 1]
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = torch.from_numpy(img.transpose(2, 0, 1))
    img = img.float().div_(255.0)

    # Normalize with ImageNet mean and std
    dtype = img.dtype
    device = img.device
    mean = torch.as_tensor(mean, dtype=dtype, device=device).view(-1, 1, 1)
    std  = torch.as_tensor(std,  dtype=dtype, device=device).view(-1, 1, 1)
    img.sub_(mean).div_(std)

    return img


def to_2tuple(x):
    if isinstance(x, (tuple, list)):
        return tuple(x)
    return (x, x)


def _trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    # Values are generated by using a truncated uniform distribution and
    # then using the inverse CDF for the normal distribution.
    # Get upper and lower cdf values
    l = norm_cdf((a - mean) / std)
    u = norm_cdf((b - mean) / std)

    # Uniformly fill tensor with values from [l, u], then translate to
    # [2l-1, 2u-1].
    tensor.uniform_(2 * l - 1, 2 * u - 1)

    # Use inverse cdf transform for normal distribution to get truncated
    # standard normal
    tensor.erfinv_()

    # Transform to proper mean, std
    tensor.mul_(std * math.sqrt(2.))
    tensor.add_(mean)

    # Clamp to ensure it's in the proper range
    tensor.clamp_(min=a, max=b)
    return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    NOTE: this impl is similar to the PyTorch trunc_normal_, the bounds [a, b] are
    applied while sampling the normal with mean/std applied, therefore a, b args
    should be adjusted to match the range of mean, std args.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    with torch.no_grad():
        return _trunc_normal_(tensor, mean, std, a, b)


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        # x = self.drop(x)
        # commit this for the orignal BERT implement 
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(
            self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0.,
            proj_drop=0., attn_head_dim=None, use_flash_attn=False, causal=False):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        if attn_head_dim is not None:
            head_dim = attn_head_dim
        all_head_dim = head_dim * self.num_heads
        self.scale = qk_scale or head_dim ** -0.5

        self.qkv = nn.Linear(dim, all_head_dim * 3, bias=False)
        if qkv_bias:
            self.q_bias = nn.Parameter(torch.zeros(all_head_dim))
            self.v_bias = nn.Parameter(torch.zeros(all_head_dim))
        else:
            self.q_bias = None
            self.v_bias = None

        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(all_head_dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

        self.use_flash_attn = use_flash_attn
        if use_flash_attn:
            self.causal = causal
            self.inner_attn = FlashAttention(attention_dropout=attn_drop)

    def _naive_attn(self, x):
        B, N, C = x.shape
        qkv_bias = None
        if self.q_bias is not None:
            qkv_bias = torch.cat((self.q_bias, torch.zeros_like(self.v_bias, requires_grad=False), self.v_bias))
        # qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        qkv = F.linear(input=x, weight=self.qkv.weight, bias=qkv_bias)
        qkv = qkv.reshape(B, N, 3, self.num_heads, -1).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]   # make torchscript happy (cannot use tensor as tuple)

        q = q * self.scale
        attn = (q @ k.transpose(-2, -1))

        
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, -1)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x
    
    def _flash_attn(self, x):
        B, N, _ = x.shape
        qkv_bias = None
        if self.q_bias is not None:
            # Combine biases as in Code B
            qkv_bias = torch.cat((
                self.q_bias, 
                torch.zeros_like(self.v_bias, requires_grad=False), 
                self.v_bias
            ))
        # Compute qkv using the same linear layer as vanilla
        qkv = F.linear(x, weight=self.qkv.weight, bias=qkv_bias)
        # Reshape to [B, N, 3, num_heads, -1]
        qkv = qkv.reshape(B, N, 3, self.num_heads, -1)
        # Alternatively, you could also use rearrange:
        # qkv = rearrange(qkv, "b s (three h d) -> b s three h d", three=3, h=self.num_heads)
        
        # Call flash attention module (flash op expects the qkv in a similar shape)
        context, _ = self.inner_attn(qkv, causal=self.causal)
        # context is expected to be of shape [B, N, num_heads, d]
        x = self.proj(context.view(B, N, -1))
        x = self.proj_drop(x)
        return x
    
    def forward(self, x):
        x = self._naive_attn(x) if not self.use_flash_attn else self._flash_attn(x)
        return x


class Block(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., init_values=None, act_layer=nn.GELU, norm_layer=nn.LayerNorm,
                 attn_head_dim=None, use_flash_attn=False):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale,
            attn_drop=attn_drop, proj_drop=drop, attn_head_dim=attn_head_dim, use_flash_attn=use_flash_attn, causal=False)
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

        if init_values > 0:
            self.gamma_1 = nn.Parameter(init_values * torch.ones((dim)),requires_grad=True)
            self.gamma_2 = nn.Parameter(init_values * torch.ones((dim)),requires_grad=True)
        else:
            self.gamma_1, self.gamma_2 = None, None

    def forward(self, x):
        if self.gamma_1 is None:
            x = x + self.attn(self.norm1(x))
            x = x + self.mlp(self.norm2(x))
        else:
            x = x + self.gamma_1 * self.attn(self.norm1(x))
            x = x + self.gamma_2 * self.mlp(self.norm2(x))
        return x


class PatchEmbed(nn.Module):
    """ Image to Patch Embedding
    """
    def __init__(self, img_size=224, patch_size=16, in_chans=3, embed_dim=768, num_frames=16, tubelet_size=2):
        super().__init__()
        img_size = to_2tuple(img_size)
        patch_size = to_2tuple(patch_size)
        self.tubelet_size = int(tubelet_size)
        num_patches = (img_size[1] // patch_size[1]) * (img_size[0] // patch_size[0]) * (num_frames // self.tubelet_size)
        self.img_size = img_size
        self.patch_size = patch_size
        self.num_patches = num_patches
        self.proj = nn.Conv3d(in_channels=in_chans, out_channels=embed_dim, 
                            kernel_size = (self.tubelet_size,  patch_size[0],patch_size[1]), 
                            stride=(self.tubelet_size,  patch_size[0],  patch_size[1]))

    def forward(self, x, **kwargs):
        B, C, T, H, W = x.shape
        # FIXME look at relaxing size constraints
        assert H == self.img_size[0] and W == self.img_size[1], \
            f"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]})."
        x = self.proj(x).flatten(2).transpose(1, 2)
        return x
    

# sin-cos position encoding
# https://github.com/jadore801120/attention-is-all-you-need-pytorch/blob/master/transformer/Models.py#L31
def get_sinusoid_encoding_table(n_position, d_hid): 
    ''' Sinusoid position encoding table ''' 
    # TODO: make it with torch instead of numpy 
    def get_position_angle_vec(position): 
        return [position / np.power(10000, 2 * (hid_j // 2) / d_hid) for hid_j in range(d_hid)] 

    sinusoid_table = np.array([get_position_angle_vec(pos_i) for pos_i in range(n_position)]) 
    sinusoid_table[:, 0::2] = np.sin(sinusoid_table[:, 0::2]) # dim 2i 
    sinusoid_table[:, 1::2] = np.cos(sinusoid_table[:, 1::2]) # dim 2i+1 

    return  torch.tensor(sinusoid_table,dtype=torch.float, requires_grad=False).unsqueeze(0) 


class VisionTransformerInfer(nn.Module):
    """ Vision Transformer with support for patch or hybrid CNN input stage
    """
    def __init__(self, 
                 img_size=224, 
                 patch_size=16, 
                 in_chans=3, 
                 num_classes=1000, 
                 embed_dim=768, 
                 depth=12,
                 num_heads=12, 
                 mlp_ratio=4., 
                 qkv_bias=False, 
                 qk_scale=None, 
                 norm_layer=nn.LayerNorm, 
                 init_values=0.,
                 use_flash_attn=True,
                 init_scale=0.,
                 all_frames=16,
                 tubelet_size=2,
                 final_reduction="fc_norm"):
        super().__init__()
        self.num_classes = num_classes
        self.num_features = self.embed_dim = embed_dim  # num_features for consistency with other models
        self.tubelet_size = tubelet_size
        self.patch_embed = PatchEmbed(
            img_size=img_size, patch_size=patch_size, in_chans=in_chans, embed_dim=embed_dim, num_frames=all_frames, tubelet_size=self.tubelet_size)
        num_patches = self.patch_embed.num_patches

        if use_flash_attn:
            print("Using Flash Attention!")

        # sine-cosine positional embeddings is on the way
        self.pos_embed = get_sinusoid_encoding_table(num_patches, embed_dim)

        dpr = [x.item() for x in torch.linspace(0, 0, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList([
            Block(
                dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,
                drop=0, attn_drop=0, drop_path=dpr[i], norm_layer=norm_layer,
                init_values=init_values, use_flash_attn=use_flash_attn)
            for i in range(depth)])
        assert final_reduction in ("fc_norm", "cls", 'none', None)
        self.final_reduction = final_reduction
        self.norm = nn.Identity() if final_reduction == "fc_norm" else norm_layer(embed_dim)
        self.fc_norm = norm_layer(embed_dim) if final_reduction == "fc_norm" else None
        self.head = nn.Linear(embed_dim, num_classes) if num_classes > 0 else nn.Identity()
        self.softmax = nn.Softmax(dim=-1)

        if hasattr(self.head, "weight"):
            trunc_normal_(self.head.weight, std=.02)
        self.apply(self._init_weights)

        if hasattr(self.head, "weight"):
            self.head.weight.data.mul_(init_scale)
            self.head.bias.data.mul_(init_scale)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def get_num_layers(self):
        return len(self.blocks)

    @torch.jit.ignore
    def no_weight_decay(self):
        return {'pos_embed', 'cls_token'}

    def get_classifier(self):
        return self.head

    def reset_classifier(self, num_classes, global_pool=''):
        self.num_classes = num_classes
        self.head = nn.Linear(self.embed_dim, num_classes) if num_classes > 0 else nn.Identity()

    def forward_features(self, x):
        x = self.patch_embed(x)
        B, _, _ = x.size()

        if self.pos_embed is not None:
            x = x + self.pos_embed.expand(B, -1, -1).type_as(x).to(x.device).clone().detach()

        for blk in self.blocks:
            x = blk(x)

        x = self.norm(x)  # so features have stable and consistent distribution

        if self.final_reduction == "fc_norm":
            return self.fc_norm(x.mean(1))
        elif self.final_reduction == "cls":
            return x[:, 0]
        else:
            return x

    def forward(self, x):
        x = self.forward_features(x)
        x = self.head(x)
        x = self.softmax(x)
        return x


def get_video_vit_small(with_flash=False):
    return VisionTransformerInfer(
        patch_size=16, embed_dim=384, depth=12, num_heads=6, mlp_ratio=4, qkv_bias=True,
        norm_layer=partial(nn.LayerNorm, eps=1e-6),
        num_classes=2,
        all_frames=16,
        tubelet_size=2,
        final_reduction="fc_norm",
        init_scale=0.001,
        use_flash_attn=with_flash
    )

def get_video_vit_base(with_flash=False):
    return VisionTransformerInfer(
        patch_size=16, embed_dim=768, depth=12, num_heads=12, mlp_ratio=4, qkv_bias=True,
        norm_layer=partial(nn.LayerNorm, eps=1e-6),
        num_classes=2,
        all_frames=16,
        tubelet_size=2,
        final_reduction="fc_norm",
        init_scale=0.001,
        use_flash_attn=with_flash
    )


def main(ckpt_file, frames_folder):
    device = torch.device("cuda")

    # VideoMAE ViT-S
    model = get_video_vit_small(with_flash=False)
    model.default_cfg = {
        'url': "",
        'num_classes': 400, 'input_size': (3, 224, 224), 'pool_size': None,
        'crop_pct': .9, 'interpolation': 'bicubic',
        'mean': (0.485, 0.456, 0.406),  
        'std': (0.229, 0.224, 0.225),
    }

    checkpoint = torch.load(ckpt_file, map_location='cpu')
    model.load_state_dict(checkpoint)
    model.to(device)
    model.eval()

    # Prepare the sliding window and read the frames
    sliding_window_frames = torch.zeros((1, 3, 16, 224, 224), dtype=torch.float32)
    # fill the first sliding window
    imglist = natsorted([item for item in os.listdir(frames_folder) if os.path.splitext(item)[1] in IMG_EXT])
    assert len(imglist) > 15, "We need at least 16 frames!"
    for i, img_file in enumerate(imglist[:16]):
        img = cv2.imread(os.path.join(frames_folder, img_file))
        img = cv2.resize(img, dsize=(224, 224), interpolation=cv2.INTER_CUBIC).astype(np.uint8)
        img = prepare_image(img, (0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
        sliding_window_frames[0, :, i, :, :] = img
    sliding_window_frames = sliding_window_frames.to(device, non_blocking=True)
    # make first prediction
    out = model(sliding_window_frames)
    print(f"First prediction: {out}")

    # now can predict frame by frame
    for i, img_file in enumerate(imglist[16:]):
        if i < 16:
            continue

        # Prepare new frame
        img = cv2.imread(os.path.join(frames_folder, img_file))
        img = cv2.resize(img, dsize=(224, 224), interpolation=cv2.INTER_CUBIC)
        img = prepare_image(img, (0.485, 0.456, 0.406), (0.229, 0.224, 0.225))
        img = img.to(device, non_blocking=True)

        # Shift sliding window
        #   # drop the oldest frame and shift left
        sliding_window_frames = sliding_window_frames[:, :, 1:, :, :]  # shape: (1, 3, T-1, H, W)
        #   # add new frame to the end
        img = img.unsqueeze(0).unsqueeze(2)  # shape: (1, 3, 1, H, W)
        #   # concatenate along time dimension
        sliding_window_frames = torch.cat([sliding_window_frames, img], dim=2)  # (1, 3, T, H, W)

        # Make new prediction. This model applies softmax and outputs probabilities
        raw_out = model(sliding_window_frames)
        risk_prob = raw_out[0][1].item()
        print(f"Frame {i}, risk probability: {risk_prob:.2f}")

    print("Done!")


if __name__ == "__main__":
    main(
        ckpt_file="/mnt/adas7tb/sorlova/VideoMAE_logs/train_logs/finetune/DoTA_orig/vm1-small-dapt_dota_lr1e3_b56x1_dsampl1val1_ld06_aam6n3/checkpoint-bestmccauc.pth",# "your_checkpoint_file.pth",
        frames_folder="/mnt/adas7tb/sorlova/datasets/TSTTC/test/2023-01-03-09-19-35-051234/cam1" # "your_frames_folder",
        )

